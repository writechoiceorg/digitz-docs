openapi: 3.0.0
info:
  title: Digitzs API
  description: >-
    The Digitzs API provides a quick, painless, secure, profitable way to build
    merchant services into your app. Click
    [here](https://digitzs.com/wp-content/uploads/2019/04/API-User-Manual.pdf)
    to learn more about the Digitzs API, and
    [here](https://digitzs.com/wp-content/uploads/2019/07/Digitzs-Quick-Start-Guide.pdf)
    for the Digitzs Quick Start Guide.


    # Merchant Services


    Your users can open a merchant account in real time—without ever leaving
    your site—and process transactions immediately. You earn revenue on every
    sale.


    **No Abandonment**  

    Account creation, payment processing, and transaction reporting all happen
    inside your app. Better UX = Higher Conversions


    **No Waiting**  

    Accounts are created in real-time and merchants can accept payments
    immediately. No more waiting around for approvals.


    **No Receivables**  

    Automatically split the proceeds from any sale to collect your platform or
    marketplace fees. No more invoicing. Get your piece of the pie today.


    **No Nonsense**  

    Merchants pay a flat rate of 2.9% + 30¢ per transaction. No surprise fees.
    No gimmicks. Predictable costs make life easier.


    **Instant Funding**  

    Merchants can get funds instantly when a customer pays with a qualified
    debit card. Restrictions apply. Reserves required.


    **Lifetime revenue**  

    Payments are now a profit center. Earn income every time a transaction is
    processed. Making money while you sleep is always nice.


    # Headers


    As a part of authentication into the Digitzs API, there are different
    headers that are required to successfully call functions. They are as listed
    below. **x-api-key**  

    This is your API Key, provided during on-boarding


    **Authorization**  

    This is your app token, generated by calling /auth/token (as described
    below). This token expires every hour.  

    **NOTE:** the value needs `Bearer` prepended to your app token. This is with
    a capital “B” and a space between Bearer and your token.


    **appId**  

    This is your application ID, provided during on-boarding.


    # Errors


    Status codes are issued by a server in response to a client’s request made
    to the server. They include codes from [Internet Engineering Task
    Force](https://www.ietf.org/) (IETF) Request for Comments (RFCs), other
    specifications, and some additional codes used in some common applications
    of the Hypertext Transfer Protocol (HTTP).


    There are five status code categories. The first digit of the status code
    defines the class of response. The last two digits do not have any class or
    categorization role.


    1 – Informational. The request was received, continuing process.


    2 – Successful. The request was successfully received, understood, and
    accepted.


    3 – Redirection. There is further action necessary in order to complete the
    request.


    4 – Client Error. The request contains bad syntax or cannot be fulfilled.


    5 – Server Error. The server failed to fulfill an apparently valid request.


    Click
    [here](https://digitzs.com/wp-content/uploads/2019/04/API-User-Manual.pdf)
    to learn more about the Digitzs API.


    | HTTP Error Codes | Meaning |

    | --- | --- |

    | 200 - OK | The request was successful. |

    | 400 - Bad Request | The requested item does not exist. |

    | 401 - Unauthorized | An authorization header is required. |

    | 402 - Payment Required | Reserved for future use. |

    | 403 - Forbidden | The account is not authorized. |

    | 404 - Not Found | The resource cannot be found. |

    | 408 - Request Timeout | The server timed out. |

    | 409 - Conflict | Three is an editing conflict. |

    | 429 - Too Many Requests | The user has sent too many requests. |

    | 500 - Internal Server Error | There was an unexpected error. |

    | 501 - Not Implemented | The request method not recognized. |

    | 502 - Bad Gateway | The response is invalid. |

    | 503 - Service Unavailable | The server is currently unavailable. |

    | 504 - Gateway Timeout | A timely response was not received. |
  version: 1.0.0
servers:
  - url: http://{{endpoint}}
tags:
  - name: Authorization
    description: >-
      A two-part authentication and authorization process is required in order
      to access the Digitzs API:


      Authentication. Verifying customer identity.

      Authorization. Granting customer access.

      The endpoints that facilitate this process are described below.


      | **Auth Endpoints**    |

      | --------------------- |

      | **POST**`/auth/key`   |

      | **POST**`/auth/token` |
  - name: Payments
    description: >-
      Use the payment endpoints to accept online and mobile payments.


      List Payments. Used to obtain a list of merchant payments.

      Create Payment. Used to perform payment transactions.

      Retrieve Payment. Used to find information about a specific payment.

      Each of these endpoints is described below.


      For information regarding AVS, see
      [this](https://drive.google.com/file/d/1fst6_j0GvyN0M7ogP54LRAiAWtJxixYp/view?usp=sharing)


      | **Payment Endpoints**     |

      | ------------------------- |

      | **GET**  `/payments`      |

      | **POST** `/payments`      |

      | **GET**  `/payments/{id}` |
  - name: Merchants
    description: >-
      Use the merchant endpoints to store transaction data for your business
      partners. All headers are required.


      -   **List Merchants**. Used to obtain a list of merchants.

      -   **Create Merchant**. Used to set up a new merchant account.

      -   **Retrieve Merchant**. Used to find information about a specific
      merchant.


      Each of these endpoints is described below.


      | Merchant Endpoints |

      | --- |

      | **GET** `/merchants` |

      | **POST** `/merchants` |

      | **GET** `/merchants/{id}` |
paths:
  /auth/key:
    post:
      tags:
        - Authorization
      summary: Create API Key
      description: >-
        Use endpoint `POST /auth/key` to get an appKey for your application. You
        can create a new key at any time. Creating a new key renders the old key
        unusable. This is required and only used for `/auth/token`.


        ### Request


        | Parameter | Description |

        | --- | --- |

        | data | A key for grouping different types of API data. |

        | type | This API call type. This call must be "auth". |

        | attributes | A key for grouping data. |

        | appId | Supplied by Digitzs on onboarding. |


        ### Response


        | Parameter | Description |

        | --- | --- |

        | data | A key for grouping different types of API data. |

        | type | This API call type. This call must be "auth". |

        | id | The same `x-api-key` used in the Header |

        | attributes | A key for grouping data. |

        | appKey | The key used to create an appToken with `/auth/token` |
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"data\": {\n        \"type\": \"auth\",\n       
                \"attributes\": {\n            \"appId\": \"{{appId}}\"\n       
                }\n    }\n}"
      parameters:
        - name: x-api-key
          in: header
          schema:
            type: string
          description: API Key given during onboarding
          example: '{{apiKey}}'
        - name: Content-Type
          in: header
          schema:
            type: string
          description: Optional, but REST Standard.
          example: application/json
      responses:
        '201':
          description: Created
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '224'
            Connection:
              schema:
                type: string
                example: keep-alive
            Date:
              schema:
                type: string
                example: Fri, 27 Sep 2019 20:01:40 GMT
            x-amzn-RequestId:
              schema:
                type: string
                example: 66d863b5-b325-408d-9aab-953b78efd37a
            x-amz-apigw-id:
              schema:
                type: string
                example: AsWZkF7dvHcFSFg=
            X-Amzn-Trace-Id:
              schema:
                type: string
                example: Root=1-5d8e6aa3-29a9e5b66964ac97784f2a8b;Sampled=0
            Via:
              schema:
                type: string
                example: >-
                  1.1 aabd01c4a20dae837d162bd972422efc.cloudfront.net
                  (CloudFront), 1.1
                  39f9e0f028321e95b5ebd1cd55661fd6.cloudfront.net (CloudFront)
            X-Amz-Cf-Pop:
              schema:
                type: string
                example: SEA19
            X-Cache:
              schema:
                type: string
                example: Miss from cloudfront
            X-Amz-Cf-Id:
              schema:
                type: string
                example: H_I0wkuc77yknCR1sYqiFHf4QbEi-xY6Cl-ty-wiRGu7bY_TIR57ng==
          content:
            application/json:
              schema:
                type: object
              example:
                links:
                  self: xxxx/auth/key
                data:
                  type: auth
                  id: xxxx
                  attributes:
                    appKey: xxxx
  /auth/token:
    post:
      tags:
        - Authorization
      summary: Create App Token
      description: >-
        Use endpoint `POST /auth/token` to get a temporary appToken. You will
        use the token to authenticate your application’s calls to the Digitzs
        API. **Tokens expire after one hour.**


        **NOTE**: The `Authorization` header value that is created with this
        must be formatted "Bearer xxxxxx", with x's replaced with the `appToken`
        value.



        ## Request


        | Parameter | Descriptoin |

        | --- | --- |

        | data | A key for grouping different types of API data. |

        | type | This API call type. This call must be "auth". |

        | attributes | A key for grouping data. |

        | appKey | The `appKey`value from `/auth/key` |


        ## Response


        | Parameter | Description |

        | --- | --- |

        | data | A key for grouping different types of API data. |

        | type | This API call type. This call must be "auth". |

        | id | The same `x-api-key` used in the Header |

        | attributes | A key for grouping data. |

        | appToken | The `Authorization` header value to use for most API calls.
        |
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"data\": {\n        \"type\": \"auth\",\n       
                \"attributes\": {\n            \"appKey\":
                \"{{appKey}}\"\n        }\n    }\n}"
      parameters:
        - name: x-api-key
          in: header
          schema:
            type: string
          description: API Key given during onboarding
          example: '{{apiKey}}'
        - name: Content-Type
          in: header
          schema:
            type: string
          description: Optional, but REST Standard.
          example: application/json
      responses:
        '201':
          description: Created
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '744'
            Connection:
              schema:
                type: string
                example: keep-alive
            Date:
              schema:
                type: string
                example: Fri, 27 Sep 2019 20:43:30 GMT
            x-amzn-RequestId:
              schema:
                type: string
                example: 92a8a768-c16c-4b1c-b90f-d7f269ca5fb0
            x-amz-apigw-id:
              schema:
                type: string
                example: AschyGexvHcF1QA=
            X-Amzn-Trace-Id:
              schema:
                type: string
                example: Root=1-5d8e7471-87ead1f4e39a1801423fc808;Sampled=0
            Via:
              schema:
                type: string
                example: >-
                  1.1 0c7df46428c45dd75d01d31cc57c5d23.cloudfront.net
                  (CloudFront), 1.1
                  0b29dbae3ec4657017234abf5689a8f8.cloudfront.net (CloudFront)
            X-Amz-Cf-Pop:
              schema:
                type: string
                example: HEL50-C1
            X-Cache:
              schema:
                type: string
                example: Miss from cloudfront
            X-Amz-Cf-Id:
              schema:
                type: string
                example: rFBISsVRU8LYvxKUDpeCeWowNI5QFWyAdmMSoQntg6nLBAeeRxp5LQ==
          content:
            application/json:
              schema:
                type: object
              example:
                links:
                  self: xxxx/auth/token
                data:
                  type: auth
                  id: xxxx
                  attributes:
                    appToken: xxxx
  /payments:
    post:
      tags:
        - Payments
      summary: Test API-Split refund
      description: >-
        Use endpoint **POST** `/payments` to refund the split of a payment.


        Request:


        | Parameter | Description |

        | --- | --- |

        | `data` | A key for grouping different types of API data. |

        | `type` | The type of transaction. |

        | `attributes` | A key for grouping payment identification data. |

        | `miscData` | Additional data to store along the call (optional) |

        | `paymentType` | The type of payment transaction. Must be
        `cardSplitRefund`. |

        | `merchantId` | The merchant account number. |

        | `split` | A key for grouping the second merchant's ID |

        | `merchantId` | The second merchant account number, this is where the
        split of the money had gone to |

        | `amount` | **Set to "000" for the time being.** |

        | `transaction` | A key for grouping payment transaction data. |

        | `amount` | The transaction amount in cents. |

        | `currency` | The three-character code. |

        | `invoice` | The invoice number for the transaction. |

        | `originalSplit` | A key for grouping the ID of the original payment to
        be refunded |

        | `id` | The transaction ID to refund |


        Response:


        | Parameter | Description |

        | --- | --- |

        | `data` | A key for grouping different types of API data. |

        | `type` | The type of transaction. |

        | `id` | The payment transaction identification code. |

        | `attributes` | A key for grouping payment identification data. |

        | `paymentType` | The type of payment transaction. |

        | `transaction` | A key for grouping payment transaction data. |

        | `code` | The banking entity response code. |

        | `message` | The status of the transaction. |

        | `amount` | The transaction amount in dollars and cents. |

        | `invoice` | The invoice number for the transaction. |

        | `currency` | The currency used for the transaction. |
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"data\": {\n        \"type\": \"payments\",\n       
                \"attributes\": {\n        \t\"miscData\": \"a
                note\",\n            \"paymentType\":
                \"cardSplitRefund\",\n            \"merchantId\":
                \"{{merchantId}}\",\n            \"split\": {\n               
                \"merchantId\": \"{{merchantId2}}\",\n               
                \"amount\": \"000\"\n            },\n           
                \"transaction\": {\n                \"amount\":
                \"500\",\n                \"currency\":
                \"USD\",\n                \"invoice\": \"123456\"\n           
                },\n            \"originalSplit\": {\n                \"id\":
                \"{{splitpaymentId}}\"\n            }\n        }\n    }\n}"
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          description: appToken created by `/auth/token`
          example: Bearer {{appToken}}
        - name: x-api-key
          in: header
          schema:
            type: string
          description: API Key given during onboarding
          example: '{{apiKey}}'
        - name: Content-Type
          in: header
          schema:
            type: string
          description: Optional, but REST Standard.
          example: application/json
      responses:
        '201':
          description: Created
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '363'
            Connection:
              schema:
                type: string
                example: keep-alive
            Date:
              schema:
                type: string
                example: Mon, 14 Oct 2019 06:50:21 GMT
            x-amzn-RequestId:
              schema:
                type: string
                example: fcfbfb11-5ac1-4b61-863b-04b99491ad3c
            x-amz-apigw-id:
              schema:
                type: string
                example: Bika-HiWvHcFeDg=
            X-Amzn-Trace-Id:
              schema:
                type: string
                example: Root=1-5da41aac-f94c7dc4baf023bcc626726c;Sampled=0
            Via:
              schema:
                type: string
                example: >-
                  1.1 01c28b52813cd0e82f810c492808b142.cloudfront.net
                  (CloudFront), 1.1
                  7de3eef800cf24f49094394d8b5e8d1a.cloudfront.net (CloudFront)
            X-Amz-Cf-Pop:
              schema:
                type: string
                example: HIO51-C1
            X-Cache:
              schema:
                type: string
                example: Miss from cloudfront
            X-Amz-Cf-Id:
              schema:
                type: string
                example: 0u_C-gnJ8k49b6gmUCEfsYTDmBSl41JHeJjxIhmcH-sdib_F82-LHw==
          content:
            application/json:
              schema:
                type: object
              example:
                links:
                  self: x
                data:
                  type: payments
                  id: refundId
                  attributes:
                    paymentType: cardSplitRefund
                    transaction:
                      code: '0'
                      message: Success
                      amount: '500'
                      invoice: '123456'
                      currency: USD
    get:
      tags:
        - Payments
      summary: Test API-Get payment List for Merchant
      description: >-
        Use endpoint **GET** `/payments` to retrieve a list of transactions


        **Note**: There are no request parameters for this endpoint, besides the
        merchantId in the URI.


        Response:

        (Refer to GET Payment by ID's possible responses for individual object
        details). Data is an array of payment objects, under the specified
        merchantId.
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          description: appToken created by `/auth/token`
          example: Bearer {{appToken}}
        - name: x-api-key
          in: header
          schema:
            type: string
          description: API Key given during onboarding
          example: '{{apiKey}}'
        - name: limit
          in: query
          schema:
            type: integer
          description: Limit's the amount of items that can be returned
          example: '25'
        - name: id
          in: query
          schema:
            type: string
          description: The merchantId to query results by
          example: '{{merchantId}}'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '11361'
            Connection:
              schema:
                type: string
                example: keep-alive
            Date:
              schema:
                type: string
                example: Thu, 10 Oct 2019 19:07:18 GMT
            x-amzn-RequestId:
              schema:
                type: string
                example: eeb9cef3-72d6-4e5a-a2a6-be876d62d08b
            x-amz-apigw-id:
              schema:
                type: string
                example: BXEnxFRLvHcF6AQ=
            X-Amzn-Trace-Id:
              schema:
                type: string
                example: Root=1-5d9f8164-c374f323dbcd01ee2ead5636;Sampled=0
            Via:
              schema:
                type: string
                example: >-
                  1.1 3cc149abcbd8cb50553c09666247bcfa.cloudfront.net
                  (CloudFront), 1.1
                  1b0911478686968732f973d6e5e31d11.cloudfront.net (CloudFront)
            X-Amz-Cf-Pop:
              schema:
                type: string
                example: HIO50-C1
            X-Cache:
              schema:
                type: string
                example: Miss from cloudfront
            X-Amz-Cf-Id:
              schema:
                type: string
                example: IY1anzAwGgYYV3OowVVL28y8K641tTZRceJnXyVNtywicQmTuUUFvQ==
          content:
            application/json:
              schema:
                type: object
              example:
                links:
                  self: x
                  next: x
                  note: URL to call for next set
                meta:
                  items: 25
                  count: 26
                  limit: '25'
                  more: true
                data:
                  - id: paymentIdWithBank
                    attributes:
                      bank:
                        routingNumber: xxxx9593
                        bankName: Wells Fargo
                        accountNumber: xxxx4567
                        accountName: MegaCorp
                        accountType: checking
                      created: '2019-10-10T19:05:58.955Z'
                      merchantId: merchantId
                      paymentType: ACH
                      transaction:
                        amount: '3635'
                        currency: USD
                        invoice: Payment-ACH-02
                        code: '0'
                        message: Success
                    type: payments
                  - id: VoidId
                    attributes:
                      created: '2019-10-10T18:49:55.628Z'
                      merchantId: merchantId
                      paymentType: void
                      transaction:
                        amount: '500'
                        currency: USD
                        code: '0'
                        invoice: '123456'
                        message: Success
                    type: payments
                  - id: cardPaymentId
                    attributes:
                      billingAddress:
                        zip: '90210'
                        country: USA
                        state: CA
                        line2: Suite 007
                        city: Los Angeles
                        line1: 21 Jump Street
                      card:
                        number: xxxx1685
                        holder: Jane Doe
                        expiry: '0220'
                        code: xxx
                      created: '2019-10-10T18:49:35.311Z'
                      merchantId: merchantId
                      paymentType: card
                      transaction:
                        amount: '500'
                        code: '0'
                        authCode: A11111
                        avsResult: T
                        gross: '500'
                        rate: '2.95'
                        fee: '35'
                        currency: USD
                        invoice: '123456'
                        message: Success
                        net: '450'
                        grossMinusNet: '50'
                    type: payments
                  - id: cardSplitId
                    attributes:
                      card:
                        number: xxxx4426
                        holder: Dinh Huyen
                        expiry: '1299'
                        code: xxx
                      created: '2019-10-10T18:45:05.688Z'
                      merchantId: merchantId
                      paymentType: cardSplit
                      transaction:
                        amount: '500'
                        code: '0'
                        authCode: A11111
                        avsResult: T
                        currency: USD
                        invoice: '123456'
                        message: Success
                    type: payments
                  - id: cardRefundId
                    attributes:
                      created: '2019-10-10T18:40:37.793Z'
                      merchantId: merchantId
                      paymentType: cardRefund
                      transaction:
                        amount: '500'
                        currency: USD
                        code: '0'
                        invoice: '123456'
                        message: Success
                    type: payments
                  - id: secondSplitId
                    attributes:
                      created: '2019-10-10T18:30:34.906Z'
                      merchantId: merchantId
                      paymentType: secondSplit
                      transaction:
                        message: Success
                        amount: '100'
                        code: '0'
                    type: payments
                  - id: tokenSplitId
                    attributes:
                      created: '2019-10-10T18:29:13.447Z'
                      merchantId: merchantId
                      paymentType: tokenSplit
                      transaction:
                        amount: '15000'
                        currency: USD
                        codeResult: NotPresent
                        invoice: '123456'
                        authCode: A11111
                    type: payments
                  - id: TokenPaymentId
                    attributes:
                      created: '2019-10-10T18:24:01.141Z'
                      merchantId: merchantId
                      paymentType: token
                      transaction:
                        amount: '001'
                        code: '0'
                        authCode: null
                        gross: null
                        rate: null
                        fee: null
                        currency: USD
                        codeResult: NotPresent
                        invoice: PAYMENT-TOKEN-7
                        message: Success
                        net: null
                        grossMinusNet: null
                    type: payments
                  - id: ACHPaymentId
                    attributes:
                      bank:
                        routingNumber: xxxx9593
                        bankName: Wells Fargo
                        accountNumber: xxxx4567
                        accountName: MegaCorp
                        accountType: checking
                      created: '2019-10-10T18:20:50.905Z'
                      merchantId: merchantId
                      paymentType: ACH
                      transaction:
                        amount: '3635'
                        currency: USD
                        invoice: Payment-ACH-02
                        code: '0'
                        message: Success
                    type: payments
  /payments/{cardpaymentId}:
    get:
      tags:
        - Payments
      summary: Test API-Get payment by Id
      description: >-
        Use endpoint **GET** `/payments/{paymentId}` to retrieve data from an
        existing transaction


        **Note**: There are no request parameters for this endpoint, besides the
        paymentId in the URI.


        Response:


        | Parameter | Description |

        | --- | --- |

        | `data` | A key for grouping different types of API data. |

        | `type` | The type of transaction. |

        | `id` | The payment transaction identification code. |

        | `attributes` | A key for grouping payment identification data. |

        | `merchantId` | The merchant ID that this transaction belongs  to |

        | `created` | The time/date when this transaction was created |

        | `miscData` | Additional information that was stored with transaction |

        | `billingAddress` | A key for grouping billing address data. |

        | `line1` and `line2` | The card holder’s street address. |

        | `city` | The card holder’s home city. |

        | `state` | The card holder’s home state. |

        | `zip` | The card holder’s zip or postal code. |

        | `country` | The card holder’s home country. |

        | `transaction` | A key for grouping payment transaction data. |

        | `code` | The banking entity response code. |

        | `message` | The status of the transaction. |

        | `amount` | The transaction amount in dollars and cents. |

        | `invoice` | The invoice number for the transaction. |

        | `currency` | The currency used for the transaction. |

        | `authCode` | The transaction authorization code. |

        | `avsResult` | The transaction result code. |

        | `gross` | The gross transaction amount. |

        | `net` | The net transaction amount. |

        | `grossMinusNet` | The difference between the gross and net amounts. |

        | `fee` | The transaction fee. |

        | `rate` | The percentage or fixed amount of the transaction fee. |

        | `card` | A key for grouping payment card information. |

        | `holder` | The first and last name on the account. |

        | `number` | The unique number assigned to an account. |

        | `expiry` | The expiration date of the payment method. |

        | `code` | The three-character CVV2 code. |

        | `paymentType` | The type of payment (card, ach, token, ...) |

        | `type` | Type of call, will always be `payments` |
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          description: appToken created by `/auth/token`
          example: Bearer {{appToken}}
        - name: x-api-key
          in: header
          schema:
            type: string
          description: API Key given during onboarding
          example: '{{apiKey}}'
        - name: cardpaymentId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '855'
            Connection:
              schema:
                type: string
                example: keep-alive
            Date:
              schema:
                type: string
                example: Thu, 10 Oct 2019 18:59:50 GMT
            x-amzn-RequestId:
              schema:
                type: string
                example: 2d7f6191-0b1f-4945-890f-0ea5b8d85194
            x-amz-apigw-id:
              schema:
                type: string
                example: BXDh0FfkvHcFWvg=
            X-Amzn-Trace-Id:
              schema:
                type: string
                example: Root=1-5d9f7fa5-1df25eb0394e1908df4b6a10;Sampled=0
            Via:
              schema:
                type: string
                example: >-
                  1.1 8dbfaf7df256a75768461d934659b6b3.cloudfront.net
                  (CloudFront), 1.1
                  4dde8ec6d6c12741888c2d3a059d4a2f.cloudfront.net (CloudFront)
            X-Amz-Cf-Pop:
              schema:
                type: string
                example: HIO50-C1
            X-Cache:
              schema:
                type: string
                example: Miss from cloudfront
            X-Amz-Cf-Id:
              schema:
                type: string
                example: h-My-W_DtMn87fl9d80HsRYg66mU8ceHY-TDj4oYXnN4hMJUO6MYtQ==
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Test API-Get payment by Id
                  value:
                    links:
                      self: x
                    data:
                      id: '{paymentId}'
                      attributes:
                        merchantId: '{merchantId}'
                        created: '2019-10-10T18:49:35.311Z'
                        miscData: test note
                        billingAddress:
                          zip: '90210'
                          country: USA
                          state: CA
                          line2: Suite 007
                          city: Los Angeles
                          line1: 21 Jump Street
                        transaction:
                          amount: '500'
                          code: '0'
                          authCode: A11111
                          avsResult: T
                          gross: '500'
                          rate: '2.95'
                          fee: '35'
                          currency: USD
                          invoice: '123456'
                          message: Success
                          net: '450'
                          grossMinusNet: '50'
                        card:
                          number: xxxx1685
                          holder: Jane Doe
                          expiry: '0220'
                          code: xxx
                        paymentType: card
                      type: payments
                example-1:
                  summary: Test API-Get payment by Id with ACH transaction
                  value:
                    links:
                      self: x
                    data:
                      id: '{paymentId}'
                      attributes:
                        bank:
                          routingNumber: xxxx9593
                          bankName: Wells Fargo
                          accountNumber: xxxx4567
                          accountName: MegaCorp
                          accountType: checking
                        merchantId: '{merchantId}'
                        StandardEntryClassCode: WEB
                        transaction:
                          amount: '3635'
                          currency: USD
                          invoice: Payment-ACH-02
                          code: '0'
                          message: Success
                        created: '2019-10-10T19:05:58.955Z'
                        paymentType: ACH
                      type: payments
  /payments/status/{cardpaymentId}:
    get:
      tags:
        - Payments
      summary: Test API-Get payment status by Id
      description: >-
        Use endpoint **GET** `/payments/{paymentId}` to retrieve data from an
        existing transaction


        **Note**: There are no request parameters for this endpoint, besides the
        paymentId in the URI.


        Response:


        | Parameter | Description |

        | --- | --- |

        | `data` | A key for grouping different types of API data. |

        | `type` | The type of transaction. |

        | `id` | The payment transaction identification code. |

        | `attributes` | A key for grouping payment identification data. |

        | `merchantId` | The merchant ID that this transaction belongs  to |

        | `created` | The time/date when this transaction was created |

        | `miscData` | Additional information that was stored with transaction |

        | `billingAddress` | A key for grouping billing address data. |

        | `line1` and `line2` | The card holder’s street address. |

        | `city` | The card holder’s home city. |

        | `state` | The card holder’s home state. |

        | `zip` | The card holder’s zip or postal code. |

        | `country` | The card holder’s home country. |

        | `transaction` | A key for grouping payment transaction data. |

        | `code` | The banking entity response code. |

        | `message` | The status of the transaction. |

        | `amount` | The transaction amount in dollars and cents. |

        | `invoice` | The invoice number for the transaction. |

        | `currency` | The currency used for the transaction. |

        | `authCode` | The transaction authorization code. |

        | `avsResult` | The transaction result code. |

        | `gross` | The gross transaction amount. |

        | `net` | The net transaction amount. |

        | `grossMinusNet` | The difference between the gross and net amounts. |

        | `fee` | The transaction fee. |

        | `rate` | The percentage or fixed amount of the transaction fee. |

        | `card` | A key for grouping payment card information. |

        | `holder` | The first and last name on the account. |

        | `number` | The unique number assigned to an account. |

        | `expiry` | The expiration date of the payment method. |

        | `code` | The three-character CVV2 code. |

        | `paymentType` | The type of payment (card, ach, token, ...) |

        | `type` | Type of call, will always be `payments` |
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          description: appToken created by `/auth/token`
          example: Bearer {{appToken}}
        - name: x-api-key
          in: header
          schema:
            type: string
          description: API Key given during onboarding
          example: '{{apiKey}}'
        - name: cardpaymentId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '254'
            Connection:
              schema:
                type: string
                example: keep-alive
            Date:
              schema:
                type: string
                example: Wed, 29 Jan 2020 17:13:54 GMT
            x-amzn-RequestId:
              schema:
                type: string
                example: c49a18ba-7448-442f-99f3-c9fb1f24e66e
            x-amz-apigw-id:
              schema:
                type: string
                example: HEqEzGknvHcFTbw=
            X-Amzn-Trace-Id:
              schema:
                type: string
                example: Root=1-5e31bd51-342a14bc50ad639cca9923dc;Sampled=0
            Via:
              schema:
                type: string
                example: >-
                  1.1 a8d6fe7391dc1997a312e8d585f06951.cloudfront.net
                  (CloudFront), 1.1
                  4ae61d6633a78146395843c794041c7c.cloudfront.net (CloudFront)
            X-Amz-Cf-Pop:
              schema:
                type: string
                example: TLV50-C1
            X-Cache:
              schema:
                type: string
                example: Miss from cloudfront
            X-Amz-Cf-Id:
              schema:
                type: string
                example: W3tUCtyXWzXKhfDGP9ielizV7t2fXQxm2Tvbum96Okysf9U-di_IJQ==
          content:
            application/json:
              schema:
                type: object
              example:
                links:
                  self: ''
                data:
                  id: paymentId
                  txnStatus: CCDebitPending
                  type: payments
  /merchants:
    post:
      tags:
        - Merchants
      summary: Test API-Create Merchant
      description: >-
        Use endpoint **POST** `/merchants` to set up a new merchant account.


        Request Parameters:


        | Parameter | Description |

        | --- | --- |

        | `data` | A key for grouping different types of API data. See Objects
        for more information. |

        | `type` | The type of transaction. This value must be "merchants". |

        | `attributes` | A key for grouping identification and payment
        information. |

        | `AVS` | The AVS mode to set merchant to. can be `Standard`,
        `Moderate`, or `Enhanced` |

        | `accountType` | The type of bank account (personal or business). **If
        set to business, enables and requires the businessInfo and
        businessAddress groupings.** |

        | `accountName` | The first and last name of the account holder, or if a
        business, use the business's name. **This is also the Statement
        Descriptor that customers will see on their bank** |

        | `personalInfo` | A key for grouping personal information. |

        | `firstName` | The merchant’s first name. |

        | `lastName` | The merchant’s last name. |

        | `email` | The merchant's email address. |

        | `dayPhone` | The merchant’s daytime contact number. |

        | `eveningPhone` | The merchant’s evening contact number. |

        | `birthDate` | The merchant’s date of birth. **USE 01-01-1981 FOR TEST
        ENVIRONMENT** |

        | `socialSecurity` | The merchant’s social security number. |

        | `personalAddress` | A key for grouping personal address information. |

        | `line1` | The personal street address. |

        | `line2` | A second line for street address information. |

        | `city` | The city where the individual is located. |

        | `state` | The state where the individual is located. See State and
        Province Codes for more information. |

        | `zip` | The postal code where the individual is located. |

        | `country` | The three-character country code. See Country Codes for
        more information. |

        | `businessInfo` | A key for grouping business information. |

        | `businessName` | The legal name of the business as registered. |

        | `ein` | The Employer Identification Number (EIN). |

        | `phone` | The Business Phone Number (Optional) |

        | `email` | The Business Email (Optional) |

        | `url` | The Business's website url (optional) |

        | `businessAddress` | A key for grouping business address information. |

        | `line1` | The business street address. |

        | `line2` | A second street address line. |

        | `city` | The city where the business is located. |

        | `state` | The state where the business is located. |

        | `zip` | The postal code where the business is located |

        | `country` | The three-character country code. |

        | `bankInfo` | A key for grouping banking information |

        | `bankName` | The name of the financial institution. |

        | `accountOwnership` | The valid values are Personal or Business. |

        | `accountType` | The type of bank account (Checking or Savings). |

        | `accountName` | The Account name attached to the bank account. (Either
        account holder's name, or the business name) |

        | `accountNumber` | The financial institution account number. It is
        required if boarding with primary bank on file. |

        | `routingNumber` | The bank routing number. This is required if the
        payment method is checking or savings. Test environment requires a real
        routing number. |

        | `verificationData` | A key for grouping server and timestamp
        information. |

        | `ipAddress` | The IP address used for the transaction. |

        | `emailVerified` | A true or false value. |

        | `emailVerifiedTimestamp` | The date and time the email was sent. |

        | `signature` | The first and last name of the customer. |

        | `signatureTimestamp` | The date and time the transaction was
        authorized. |

        | `termsAccepted` | A true or false value. |

        | `threatMatrixPolicy` | Defaults to `Default`, Policy to use for
        ThreatMetrix (optional) |

        | `threatMetrixSessionId` | A unique identifier (preferably uuidv4),
        previously used for ThreatMetrix Embed. See
        [here](https://drive.google.com/file/d/1Y5BwkSurmj1743Vt0_7TE6ZyHmZX48S8/view?usp=sharing)
        for ThreatMetrix documentation (optional) |


        Reponse


        | Parameter | Description |

        | --- | --- |

        | `data` | A key for grouping different types of API data. See Objects
        for more information. |

        | `type` | The type of transaction. This value must be "merchants". |

        | `id` | A merchant identifier. This is the account where the split goes
        after the transaction settles. |
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"data\": {\n        \"type\": \"merchants\",\n       
                \"attributes\": {\n        \t\"AVS\": \"Standard\",\n           
                \"accountType\": \"business\",\n            \"accountName\":
                \"Huyen Dinh\",\n            \"miscData\": \"\",\n           
                \"personalInfo\": {\n                \"firstName\":
                \"Huyen\",\n                \"lastName\":
                \"Dinh\",\n                \"email\":
                \"fake@ema.il\",\n                \"dayPhone\":
                \"3105551222\",\n                \"eveningPhone\":
                \"3105551222\",\n                \"birthDate\":
                \"01-01-1981\",\n                \"socialSecurity\":
                \"333224445\"\n            },\n            \"personalAddress\":
                {\n                \"line1\": \"21 Jump
                Street\",\n                \"line2\": \"Suite
                007\",\n                \"city\": \"Los
                Angeles\",\n                \"state\": \"CA\",\n               
                \"zip\": \"90210\",\n                \"country\":
                \"USA\"\n            },\n            \"businessInfo\":
                {\n                \"businessName\":
                \"dinhhuyen\",\n                \"ein\":
                \"584384656\",\n                \"phone\":
                \"5555555555\",\n                \"email\":
                \"test@email.co\",\n                \"url\":
                \"https://test.com\"\n            },\n           
                \"businessAddress\": {\n                \"line1\": \"21 Jump
                Streets\",\n                \"line2\": \"Suite
                007\",\n                \"city\": \"Los
                Angeles\",\n                \"state\": \"CA\",\n               
                \"zip\": \"90210\",\n                \"country\":
                \"USA\"\n            },\n            \"bankInfo\":
                {\n                \"bankName\": \"Bank of
                Abundance\",\n                \"accountOwnership\":
                \"business\",\n                \"accountType\":
                \"checking\",\n                \"accountName\": \"Huyen's
                dinh\",\n                \"accountNumber\":
                \"2341234321\",\n                \"routingNumber\":
                \"026009593\"\n            },\n            \"verificationData\":
                {\n                \"ipAddress\":
                \"192.168.0.1\",\n                \"emailVerified\":
                true,\n                \"emailVerifiedTimestamp\":
                \"2016-01-31T11:16:07.234Z\",\n                \"signature\":
                \"Huyen dinh\",\n                \"signatureTimestamp\":
                \"2016-01-31T11:16:07.234Z\",\n               
                \"termsAccepted\": true\n           
                },\n\t\t\t\"threatMetrixPolicy\":
                \"Default\",\n\t\t\t\"threatMetrixSessionId\":
                \"01f50c4d1430a620a3b50005ffe98541\"\n        }\n    }\n}"
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          description: appToken created by `/auth/token`
          example: Bearer {{appToken}}
        - name: x-api-key
          in: header
          schema:
            type: string
          description: API Key given during onboarding
          example: '{{apiKey}}'
        - name: Content-Type
          in: header
          schema:
            type: string
          description: Optional, but REST Standard.
          example: application/json
      responses:
        '201':
          description: Created
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '194'
            Connection:
              schema:
                type: string
                example: keep-alive
            Date:
              schema:
                type: string
                example: Thu, 10 Oct 2019 19:27:02 GMT
            x-amzn-RequestId:
              schema:
                type: string
                example: 2be3f72a-9b58-4948-a6f2-05bedc5c4956
            x-amz-apigw-id:
              schema:
                type: string
                example: BXHgWGABvHcF7rw=
            X-Amzn-Trace-Id:
              schema:
                type: string
                example: Root=1-5d9f8602-9a4f242824ba4744b4359c02;Sampled=0
            Via:
              schema:
                type: string
                example: >-
                  1.1 00f0a41f749793b9dd653153037c957e.cloudfront.net
                  (CloudFront), 1.1
                  d1151317ba32afe0e6370fd69fed222e.cloudfront.net (CloudFront)
            X-Amz-Cf-Pop:
              schema:
                type: string
                example: HIO50-C1
            X-Cache:
              schema:
                type: string
                example: Miss from cloudfront
            X-Amz-Cf-Id:
              schema:
                type: string
                example: x6zBnkh9k3uCL0KHN4TD48jwtfgEmEF9V621Mce2apeFEuIjXuCl3Q==
          content:
            application/json:
              schema:
                type: object
              example:
                links:
                  self: x
                data:
                  type: merchants
                  id: merchantId
    get:
      tags:
        - Merchants
      summary: Test API-Get Merchant List
      description: >-
        Use endpoint **GET** `/merchants?limit=20` to view a list of the
        merchants


        Note: There are no request parameters for this endpoint, Also change
        `limit` in the URI to whatever integer value of items you want to
        recieve.


        Response:



        | Parameter | Description |

        | --- | --- |

        | `meta` | A key for grouping different types of API data. |

        | `items` | The number of items in the database. It is equal to or
        smaller than limit’s value. |

        | `limit` | The maximum number of results to return. |

        | `more` | A true/false value that indicates whether “items” or “limit”
        allows more results. |

        | `data` | A key for grouping results. |

        | `id` | The merchant identification string in Digitzs |

        | `attributes` | A key for grouping identification and payment
        information. |

        | `accountName` | The name of the individual or business associated with
        the account. |

        | `accountType` | The account type (Personal or Business). |

        | `created` | The date and time that the payment was created. |

        | `type` | The transaction type. Must equal “merchants”. |
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          description: appToken created by `/auth/token`
          example: Bearer {{appToken}}
        - name: x-api-key
          in: header
          schema:
            type: string
          description: API Key given during onboarding
          example: '{{apiKey}}'
        - name: limit
          in: query
          schema:
            type: integer
          description: Limit's the amount of items that can be returned
          example: '25'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '4588'
            Connection:
              schema:
                type: string
                example: keep-alive
            Date:
              schema:
                type: string
                example: Thu, 10 Oct 2019 19:28:09 GMT
            x-amzn-RequestId:
              schema:
                type: string
                example: 8f7b519e-63cb-472b-9cb6-02e5fb77791f
            x-amz-apigw-id:
              schema:
                type: string
                example: BXHrgHD7PHcFkVA=
            X-Amzn-Trace-Id:
              schema:
                type: string
                example: Root=1-5d9f8649-56fdfeb09a03ccf092a93bd0;Sampled=0
            Via:
              schema:
                type: string
                example: >-
                  1.1 43fc53332a866a4c9b5c72cec114706b.cloudfront.net
                  (CloudFront), 1.1
                  d1151317ba32afe0e6370fd69fed222e.cloudfront.net (CloudFront)
            X-Amz-Cf-Pop:
              schema:
                type: string
                example: HIO50-C1
            X-Cache:
              schema:
                type: string
                example: Miss from cloudfront
            X-Amz-Cf-Id:
              schema:
                type: string
                example: ub3n6byZfdHJrQwm81BlAlszXQBVXhxH9BXqS20Xzm4xbEfaLEgufA==
          content:
            application/json:
              schema:
                type: object
              example:
                link:
                  self: x
                meta:
                  limit: 25
                  items: 25
                  more: true
                data:
                  - id: merchantId
                    attributes:
                      accountName: Huyen Dinh
                      accountType: business
                      created: '2019-10-10T19:27:00.680Z'
                    type: merchants
  /merchants/{merchantId}:
    get:
      tags:
        - Merchants
      summary: Test API-Get Merchant by Id
      description: >-
        Use endpoint **GET**  `/merchants/{merchantId}` to view information
        about a specific merchant.


        ### GET `/merchants/{merchantId}` Request


        Note: There are no request parameters for this endpoint.


        Response:


        | Parameter | Description |

        | --- | --- |

        | `data` | A key for grouping different types of API data. See Objects
        for more information. |

        | `id` | Merchant Identification string for Digitzs |

        | `type` | The type of transaction. This value must be "merchants". |

        | `attributes` | A key for grouping identification and payment
        information. |

        | `accountType` | The type of bank account (Checking or Savings). |

        | `accountName` | The first and last name of the account holder. |

        | `personalInfo` | A key for grouping personal information. |

        | `firstName` | The merchant’s first name. |

        | `lastName` | The merchant’s last name. |

        | `email` | The merchant's email address. |

        | `dayPhone` | The merchant’s daytime contact number. |

        | `eveningPhone` | The merchant’s evening contact number. |

        | `birthDate` | The merchant’s date of birth. |

        | `socialSecurity` | The merchant’s social security number. |

        | `personalAddress` | A key for grouping personal address information. |

        | `line1` | The personal street address. |

        | `line2` | A second line for street address information. |

        | `city` | The city where the individual is located. |

        | `state` | The state where the individual is located. See State and
        Province Codes for more information. |

        | `zip` | The postal code where the individual is located. |

        | `country` | The three-character country code. See Country Codes for
        more information. |

        | `businessInfo` | A key for grouping business information. |

        | `businessName` | The legal name of the business as registered. |

        | `ein` | The Employer Identification Number (EIN). |

        | `businessAddress` | A key for grouping business address information. |

        | `line1` | The business street address. |

        | `line2` | A second street address line. |

        | `city` | The city where the business is located. |

        | `state` | The state where the business is located. |

        | `zip` | The postal code where the business is located |

        | `country` | The three-character country code. |

        | `bankInfo` | A key for grouping banking information |

        | `bankName` | The name of the financial institution. |

        | `accountOwnership` | The valid values are Personal or Business. |

        | `accountType` | The type of bank account (Checking or Savings). |

        | `accountName` | The first and last name of the account holder or the
        business Name |

        | `accountNumber` | The financial institution account number. It is
        required if boarding with primary bank on file. |

        | `routingNumber` | The bank routing number. This is required if the
        payment method is checking or savings. |

        | `verificationData` | A key for grouping server and timestamp
        information. |

        | `ipAddress` | The IP address used for the transaction. |

        | `emailVerified` | A true or false value. |

        | `emailVerifiedTimestamp` | The date and time the email was sent. |

        | `signature` | The first and last name of the customer. |

        | `signatureTimestamp` | The date and time the transaction was
        authorized. |

        | `termsAccepted` | A true or false value. |
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          description: appToken created by `/auth/token`
          example: Bearer {{appToken}}
        - name: x-api-key
          in: header
          schema:
            type: string
          description: API Key given during onboarding
          example: '{{apiKey}}'
        - name: merchantId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '1198'
            Connection:
              schema:
                type: string
                example: keep-alive
            Date:
              schema:
                type: string
                example: Thu, 10 Oct 2019 19:27:31 GMT
            x-amzn-RequestId:
              schema:
                type: string
                example: 95fddeb5-2259-4d96-88c0-d9bff2d75335
            x-amz-apigw-id:
              schema:
                type: string
                example: BXHlUExNvHcFZKQ=
            X-Amzn-Trace-Id:
              schema:
                type: string
                example: Root=1-5d9f8621-8955804ef788973f10f670bf;Sampled=0
            Via:
              schema:
                type: string
                example: >-
                  1.1 490c6b39f412c738a30c226f07db749c.cloudfront.net
                  (CloudFront), 1.1
                  d1151317ba32afe0e6370fd69fed222e.cloudfront.net (CloudFront)
            X-Amz-Cf-Pop:
              schema:
                type: string
                example: HIO50-C1
            X-Cache:
              schema:
                type: string
                example: Miss from cloudfront
            X-Amz-Cf-Id:
              schema:
                type: string
                example: uIV2TSSZc4vpXXMf1wlCy-qTkpmoKXFDOxMtoTtbuP-wneU5wnI57g==
          content:
            application/json:
              schema:
                type: object
              example:
                links:
                  self: x
                data:
                  type: merchants
                  id: merchantId
                  attributes:
                    accountName: Tuan Ngoc
                    accountType: business
                    personalInfo:
                      eveningPhone: '3105551222'
                      firstName: Tuan
                      lastName: Ngoc
                      dayPhone: '1234564324'
                      socialSecurity: xxxx6789
                      birthDate: xxxx2000
                      email: Ngoc@centralfax.co.uk
                    bankInfo:
                      routingNumber: xxxx9593
                      bankName: VCB
                      accountNumber: xxxx4567
                      accountName: LuongDung
                      accountOwnership: business
                      accountType: savings
                    verificationData:
                      ipAddress: 192.168.100.14/23
                      emailVerified: true
                      signature: LuongDung
                      emailVerifiedTimestamp: '2016-01-31T11:16:07.234Z'
                      signatureTimestamp: '2016-01-31T11:16:07.234Z'
                    created: '2019-09-26T08:15:12.752Z'
                    partnerId: corsourc-152910534
                    businessAddress:
                      zip: '90210'
                      country: USA
                      state: CA
                      line2: Suite 007
                      city: Los Angeles
                      line1: 21 Jump Streets
                    personalAddress:
                      zip: '90210'
                      country: USA
                      state: CA
                      line2: Suite 007
                      city: Los Angeles
                      line1: 21 Jump Street
                    businessInfo:
                      businessName: TuanNgoc
                      ein: xxxx6789
    put:
      tags:
        - Merchants
      summary: Test API-Put Update Merchant's AVS Mode
      description: >-
        Use endpoint **PUT** `/merchants/{merchantId}` to update the AVS mode
        for the specified merchant.


        Replace {merchantId} with the Digitzs Merchant ID given during merchant
        creation.


        Request:


        | Parameter | Description |

        | --- | --- |

        | `data` | A key for grouping different types of API data. See Objects
        for more information. |

        | `type` | The type of transaction. This value must be "merchants". |

        | `attributes` | A key for grouping identification and payment
        information. |

        | `group` | Must be `AVS` for updating merchant's AVS setting. Enables
        `AVS` key. |

        | `AVS` | The AVS mode to set merchant to. can be `Standard`,
        `Moderate`, or `Enhanced` |
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"data\": {\n        \"type\": \"merchants\",\n       
                \"attributes\": {\n            \"group\": \"AVS\",\n           
                \"AVS\": \"Enhanced\"\n        }\n    }\n}"
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          description: appToken created by `/auth/token`
          example: Bearer {{appToken}}
        - name: x-api-key
          in: header
          schema:
            type: string
          description: API Key given during onboarding
          example: '{{apiKey}}'
        - name: Content-Type
          in: header
          schema:
            type: string
          description: Optional, but REST Standard.
          example: application/json
        - name: merchantId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '218'
            Connection:
              schema:
                type: string
                example: keep-alive
            Date:
              schema:
                type: string
                example: Thu, 10 Oct 2019 19:29:13 GMT
            x-amzn-RequestId:
              schema:
                type: string
                example: 98ecc485-27e3-40a4-a176-d713206a34c4
            x-amz-apigw-id:
              schema:
                type: string
                example: BXH1fHeUvHcFvjA=
            X-Amzn-Trace-Id:
              schema:
                type: string
                example: Root=1-5d9f8689-da747840740ed47ce3b11e80;Sampled=0
            Via:
              schema:
                type: string
                example: >-
                  1.1 d83ae0e1ba84e92e58bc1efc23a0c653.cloudfront.net
                  (CloudFront), 1.1
                  d1151317ba32afe0e6370fd69fed222e.cloudfront.net (CloudFront)
            X-Amz-Cf-Pop:
              schema:
                type: string
                example: HIO50-C1
            X-Cache:
              schema:
                type: string
                example: Miss from cloudfront
            X-Amz-Cf-Id:
              schema:
                type: string
                example: QERvhi3L6OoUT3ASQX69bJlx6N18gGDDbkiutw7HV8yIeBpqVSDXYg==
          content:
            application/json:
              schema:
                type: object
              example:
                links:
                  self: x
                data:
                  type: merchants
                  id: merchantId
x-readme:
  explorer-enabled: true
  proxy-enabled: true
  samples-enabled: true
